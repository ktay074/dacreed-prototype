generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  content   String
  authorId  String

  @@index([authorId])
}

model Document {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  org_content String
  org_name    String
  org_type    String
  org_size    Int
  username    String
  courseId    String?     @unique
  coursePref  CoursePref?
  Course      Course?     @relation(fields: [courseId], references: [id])
  User        User        @relation(fields: [username], references: [username])

  @@index([username])
}

model CoursePref {
  id                  String   @id @default(cuid())
  documentId          String   @unique
  simplicityPref      Int      @default(0)
  humourPref          Int      @default(0)
  professionalismPref Int      @default(0)
  creativityPref      Int      @default(0)
  document            Document @relation(fields: [documentId], references: [id])

  @@index([documentId])
}

model User {
  id        String     @id
  createdAt DateTime   @default(now())
  username  String     @unique
  Document  Document[]
  courses   Course[]   @relation("CourseToUser")

  @@index([username])
}

model Course {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  authorId   String
  title      String
  duration   DateTime
  passValue  Int       @default(80)
  documentId String?
  testId     String?
  Document   Document?
  nodes      Node[]
  Test       Test?
  users      User[]    @relation("CourseToUser")

  @@index([title])
}

model Node {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  courseId      String
  title         String
  description   String
  learningPrefs LearningPref[]
  course        Course         @relation(fields: [courseId], references: [id])

  @@index([title])
}

model LearningPref {
  id     String @id
  name   String
  nodeId String
  Node   Node   @relation(fields: [nodeId], references: [id])
}

model Events {
  id           String @id
  timeZone     String
  region       String
  country      String
  page         String
  timeSpent    Int
  scrolling    Int
  mouseClicks  Int
  buttonClicks Int
  linkClicks   Int
  mouseMoveInt Int
  keyClicks    Int
}

model Answer {
  id         Int      @id @default(autoincrement())
  content    String
  isCorrect  Boolean
  questionId Int
  Question   Question @relation(fields: [questionId], references: [id])
}

model Question {
  id      Int      @id @default(autoincrement())
  content String
  testId  Int
  Answer  Answer[]
  Test    Test     @relation(fields: [testId], references: [id])
}

model Test {
  id       Int        @id @default(autoincrement())
  courseId String     @unique
  Question Question[]
  Course   Course     @relation(fields: [courseId], references: [id])

  @@index([courseId])
}

model UploadedFile {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  file_name    String
  file_content String
  file_type    String
  file_size    Int

  @@index([id])
}
